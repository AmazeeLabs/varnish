<?php
// $Id:

define (VARNISH_NO_CLEAR, 0);
define (VARNISH_DEFAULT_CLEAR, 1);
define (VARNISH_SELECTIVE_CLEAR, 2);

/**
 * @file varnish.module
 * Provide drupal hooks for integration with the Varnish control layer.
 */
 

/**
 * Implementation of hook_menu()
 *
 * Set up admin settings callbacks, etc.
 */
function varnish_menu() {
  $items = array();
  $items['admin/settings/varnish'] = array(
    'title' => 'Varnish settings',
    'description' => 'Get the output of varnishstat.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('varnish_admin_settings_form'),
    'access arguments' => array('administer varnish'),
    'file' => 'varnish.admin.inc',
  );
  $items['admin/reports/varnish'] = array(
    'title' => 'Varnish status',
    'description' => 'Configure your varnish integration.',
    'page callback' => 'varnish_admin_reports_page',
    'access arguments' => array('administer varnish'),
    'file' => 'varnish.admin.inc',
  );
  return $items;
}

/** 
 * Implemetation of hook_perm()
 *
 * Allows admins to control access to varnish settings.
 */
function varnish_perm() {
  return array('administer varnish');
}

/**
 * Implementation of hook_requirements()
 *
 * Insure that varnish's connection is good.
 */
function varnish_requirements($phase) {
  if ($phase == 'runtime') {
    $requirements = array('varnish');
    $requirements['varnish']['title'] = t('Varnish status');
    // try a varnish admin connect, report results
    $status = _varnish_terminal_run('status', 300);
    if (strpos($status, 'Child in state running') === FALSE) {
      $requirements['varnish']['value'] = t('Varnish connection broken');
      $requirements['varnish']['severity'] = REQUIREMENT_ERROR;
      $requirements['varnish']['description'] = t('The Varnish control terminal is not responding at %server on port %port.', array('%server' => variable_get('varnish_control_terminal_server', '127.0.0.1'), '%port' => variable_get('varnish_control_terminal_port', '6082')));
    }
    else {
      $requirements['varnish']['value'] = t('Varnish runing. Observe more detailed statistics !link.', array('!link' => l(t('here'), 'admin/reports/varnish')));
    }
    return $requirements;
  }
}

/**
 * Implementation of hook_nodeapi()
 *
 * Used to pick up cache_clearing events
 */
function varnish_nodeapi(&$node, $op) {
  if ($op == 'insert' || $op == 'update') {
    // We've probably just run through node_save, and normally this is where
    // Drupal calls a cache_clear_all().
    switch (variable_get('varnish_cache_clear', VARNISH_DEFAULT_CLEAR)) {
      case VARNISH_DEFAULT_CLEAR:
        varnish_purge_all_pages();
        break;
    }
  }
}

/**
 * Implementation of hook_comment()
 *
 * Used to pick up cache_clearing events
 */
function varnish_comment($comment, $op) {
  switch ($op) {
    case 'insert':
    case 'update':
    case 'publish':
    case 'unpublish':
    case 'delete':
      if (variable_get('varnish_cache_clear', VARNISH_DEFAULT_CLEAR) == VARNISH_DEFAULT_CLEAR) {
        varnish_purge_all_pages();
      }
      break;
  }
}

/**
 * Implementation of hook_expire_cache
 *
 * Take an array from expire.module and issue purges!
 */
function varnish_expire_cache($paths) {
  $host = _varnish_get_host();
  $base = base_path();
  $paths[] = variable_get('site_frontpage', 'node');
  $purge = implode('$|^'. $base, $paths);
   _varnish_terminal_run('purge req.http.host ~ '. $host .' && req.url ~ "^'. $base . $purge .'$"');
  break;
}

/**
 * Implementation of hook_form_alter()
 *
 * Add our submit callback to the "clear caches" button.
 */
function varnish_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'system_performance_settings') {
    $form['clear_cache']['clear']['#submit'][] = 'varnish_purge_all_pages';
  }
}

/**
 * Implementation of hook_flush_caches()
 *
 * Flush caches on events like cron.
 *
 * This borrows logic from cache_clear_all() to respect cache_lifetime.
 */
function varnish_flush_caches() {
  if (variable_get('varnish_flush_cron', 0)) {
    if (variable_get('cache_lifetime', 0)) {
      $cache_flush = variable_get('cache_flush_varnish', 0);
      if ($cache_flush == 0) {
        // This is the first request to clear the cache, start a timer.
        variable_set('cache_flush_varnish', time());
      }
      else if (time() > ($cache_flush + variable_get('cache_lifetime', 0))) {
        varnish_purge_all_pages();
      }
    }
    else {
      varnish_purge_all_pages();
    }
  }
}

/**
 * Helper function to quickly flush all caches for the current site.
 */
function varnish_purge_all_pages() {
  $path = base_path();
  $host = _varnish_get_host();
  _varnish_terminal_run("purge req.http.host ~ $host && req.url ~ ^$path");
}

/**
 * Help[er function to parse the host from the global $base_url
 */
function _varnish_get_host() {
  global $base_url;
  $parts = parse_url($base_url);
  return $parts['host'];
}

/**
 * Extensible logic function to get other urls to clear.
 *
 * TODO: Merge this with Expires.module
 */
function varnish_get_active_urls($node) {
  $urls = array();
  $urls[] = 'node/'. $node->nid;
  if ($node->type == 'blog') {
    $urls[] = 'blog';
    $urls[] = 'blog/'. $node->uid;
  }
    // lots more here...
  foreach($urls as $url) {
    $alias = drupal_get_path_alias($url); // TODO: languages?
    if ($alias != $url) {
      $urls[] = $alias;
    }
  }
  return $urls;
}


/**
 * Helper function that sends commands to Varnish
 *
 * Utilizes sockets to talk to varnish terminal.
 */
function _varnish_terminal_run($command, $returnlength = 1000) {
  if (!extension_loaded('sockets')) {
    drupal_set_message(t('Sockets extension not enabled. Varnish terminal communication aborted.'), 'error');
    return FALSE;
  }
  $server = variable_get('varnish_control_terminal_server', '127.0.0.1');
  $port = variable_get('varnish_control_terminal_port', '6082');

  
  $client = socket_create(AF_INET, SOCK_STREAM, getprotobyname('tcp'));
  if (!socket_connect($client, $server, $port)) {
    watchdog('varnish', t('Unable to connect to server socket !server:!port', array('!server' => $server, '!port' => $port)));
    return FALSE;
  }
  socket_write($client, "$command\n");
  $code = socket_read($client, 3, PHP_BINARY_READ);
  if ($code != 200) {
    $error = socket_read($client, 3000, PHP_BINARY_READ);
    watchdog('varnish', t('Recieved status code !code running !command. Full response text: !error', array('!code' => $code, '!command' => $command, '!error' => $error)));
    $ret = FALSE;
  }
  else {
    // successful connection
    $ret = socket_read($client, $returnlength, PHP_BINARY_READ);
  }
  socket_close($client);
  
  return $ret;
}
